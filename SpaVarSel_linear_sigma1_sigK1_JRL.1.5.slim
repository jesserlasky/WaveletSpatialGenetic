initialize() {

    //v1.5 adds high recombination rate 
    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xyz");


    sigma=1;
   defineConstant("sigmaName", sigma);

    defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));
    defineConstant("sigma_K1", 3);
    defineConstant("sigma_K2", 1);

    defineConstant("K", 25);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 25.0);  // width and height of the simulated area
    defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
  defineConstant("opt1", 0);
  defineConstant("Tdelta", 500);
  

    initializeMutationType("m1", 0.5, "f", 0.0);        // neutral
    initializeMutationType("m2", 0.5, "n", 0.0, 2.0);   // QTL, mean zero sd = 1
    m2.convertToSubstitution = F;    
    initializeGenomicElementType("g1", c(m1, m2), c(1, 0.01)); //1/100 of genome is qtl
    initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(1e-7);
    initializeRecombinationRate(1e-7);  
    
    // spatial competition. 
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

fitness(m2) { return 1.0; } 

reproduction() {
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(nOff)) {
            pos = c(individual.spatialPosition[0:1] + rnorm(2, 0, SD), 0);
            if (p1.pointInBounds(pos)) {
                offspring = subpop.addCrossed(individual, mate);
                offspring.setSpatialPosition(pos);
            }
        }
    }
    return;
}

1 early() {
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, 0, W, W, 1));


   // defineConstant("mapValues", matrix(c(rep(-0.5,6),rep(-0.5,6),rep(c( -0.5,-0.5,0.5,0.5, -0.5, -0.5), 2), rep(-0.5,6), rep(-0.5,6)), ncol = 6, byrow = T));


    //  p1.defineSpatialMap("map1", "xy", mapValues, interpolate=F, valueRange=c(-0.5, 0.5), colors=c("red", "yellow")); // v3.5 code

    defineConstant("mapValues", matrix(c(-0.5,-0.5,0.5,0.5), ncol = 2, byrow = T));
    p1.defineSpatialMap("map1", "xy",  mapValues, interpolate = T,
        valueRange=c(-0.5, 0.5), colors=c("red", "yellow"));

   for (ind in p1.individuals) {
   ind.setSpatialPosition(p1.pointUniform());

    }
}

early() {
  //  i1.evaluate(p1);
    // inds = p1.individuals;
   // competition = i1.totalOfNeighborStrengths(inds);
  //  inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));    
    // scale fitness at edges
  //  inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
  //p1.individuals.z = 0.0; //z contains phenotype. could move to 1:early if needed

    // construct phenotypes and fitness effects from QTLs
    inds = sim.subpopulations.individuals;
    phenotype = inds.sumOfMutationsOfType(m2); //just sums of qtl effect sizes aka 'fitness' effects in the 'Mutations' output
    location = inds.spatialPosition[rep(c(T,T,F), inds.size())];
 //   optimum = p1.spatialMapValue("map1", location);

  optimum = (sim.generation < Tdelta) ? opt1 else p1.spatialMapValue("map1", location);


//   inds.fitnessScaling = 1.0 + dnorm(phenotype, optimum, sigma_K);
    inds.z = phenotype; 
    
    // color individuals according to phenotype
    inds.color = p1.spatialMapColor("map1", phenotype);
    
    // evaluate phenotypic competition
   i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition)); 
    

     sigma_K = (sim.generation < Tdelta) ? sigma_K1 else (sim.generation < (Tdelta + 100) ? sigma_K2*5 else sigma_K2);


    inds.fitnessScaling = inds.fitnessScaling * ( dnorm(phenotype, optimum, sigma_K) / dnorm(0.0, 0.0, sigma_K)); //comparing normal density to max?

    // scale fitness at edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
    
    if (sim.generation % 10 == 0 & sim.generation > Tdelta)
    catn(sim.generation + ": Mean phenotype == " + mean(phenotype) + ', mean fitness = ' + mean(inds.fitnessScaling) + ', cor=' + cor(optimum, phenotype) + ', m2 mut number: ' + mean(inds.countOfMutationsOfType(m2)) + ', N=' + length(phenotype) );
    
        if (sim.generation % 10 == 0 & sim.generation <= Tdelta)
    catn(sim.generation + ": Mean phenotype == " + mean(phenotype) + ', mean fitness = ' + mean(inds.fitnessScaling) + ', m2 mut number: ' + mean(inds.countOfMutationsOfType(m2)) + ', N=' + length(phenotype) + ', sd phen =' + sd(phenotype));

    // to be ready for mate choice
   i2.evaluate(p1);
}


 2: late() {
     // output and status blocks
    
    if((sim.generation ==(1e3 + Tdelta))){
        sim.outputFull("~/Dropbox/jesse/WaveletQstFst/Results/SLiM_sims/model_output_linearSelecGrad_1.5_sigma" + sigmaName + "_sigmaK2" + sigma_K2+ "_K" + K + '_tdelta' + Tdelta + "_gen" + sim.generation + "_" + id + ".txt");
    }


    if((sim.generation ==(5e3 + Tdelta))){
        sim.outputFull("~/Dropbox/jesse/WaveletQstFst/Results/SLiM_sims/model_output_linearSelecGrad_1.5_sigma" + sigmaName + "_sigmaK2" + sigma_K2+ "_K" + K + '_tdelta' + Tdelta + "_gen" + sim.generation + "_" + id + ".txt");
    }

    }

1e4 late() {
         sim.outputFull("~/Dropbox/jesse/WaveletQstFst/Results/SLiM_sims/model_output_linearSelecGrad_1.5_sigma" + sigmaName + "_sigmaK2" + sigma_K2+ "_K" + K + '_tdelta' + Tdelta + "_gen" + sim.generation + "_" + id + ".txt");

   sim.simulationFinished();
}
